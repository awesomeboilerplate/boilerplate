/**
 * _components.scss contains solely the mixin definitions for components.
 *
 * + This file should not depend on styles.scss; we should be able to use
 *   include this file without including styles.scss.
 * + This file should not generate any CSS on it's own; it should only contain
 *   mixin and/or function definitions.
 */

/**
 * Media query breakpoints
 */

$medium: 669px;
$large: 1024px;

/**
*
* ACCORDION requires the accordion.plugin.js file. Within the .accordion
* class each accordion item requires a div wrapper. Within the div wrapper
* there is a .header class and a .content class. The .header class is the
* clickable element that will reveal what is hidden in the .content class.
* By default .content is hidden by javascript just in case javascript is not available.
*
* Emmet: .accordion>div>(.header{header}+.content>{lorem ipsum})
*
*/

@mixin accordion() {
    > div {
        .header {
            background: $lightgray;
            color: $plain-text;
            cursor: pointer;
            font-size: 1em;
            margin-top: .5em;
            padding: .5em 1em;
            position: relative;
            text-align: left;
            width: 100%;
            &:hover {
                background: darken($lightgray, 5%);
            }
            &::after {
                bottom: 0;
                height: 1em;
                margin: auto 0;
                position: absolute;
                right: 1em;
                top: 0;
                width: 1em;
            }
            &.open {
                background: darken($lightgray, 5%);
                &::after {
                    @include fontawesome("\f068");
                }
            }
            &.close {
                &::after {
                    @include fontawesome("\f067");
                }
            }
        }
        .content {
            padding: 1em 0;
            &.hidden {
                display: none;
            }
        }
    }
}

/**
 * BACKGROUND VIDEO plays a video (without sound) in the background of an element.
 * Emmet: .backgroundvideo>(.panel>div>h1+p)+video>source[src]
 */
@mixin backgroundvideo() {
    & {
        align-items: center;
        display: flex;
        height: auto;
        justify-content: center;
        overflow: hidden;
        position: relative;
        .mold {
            background-color: rgba(2255, 255, 255, 0.6);
            padding: 2em;
            text-align: center;
            z-index: 2;
        }
        video {
            left: 0;
            position: absolute;
            top: 0;
            width: 100%;
            z-index: 1;
        }
    }
    &::before {
        content: "";
        display: block;
        padding-top: 30%;
    }
}

/**
 * CAROUSEL uses Slick to create a carousel. It defaults to a rather
 * basic, one-slide-at-a-time implementation with dots, but slick supports a
 * good deal of configuration including showing multiple slides, breakpoints,
 * syncing between slides, and plenty of javascript events and methods for
 * integration.
 *
 * The implementation on Boilerplate is using a CDN to provide
 *
 * + slick.css
 * + slick-theme.css
 * + slick.min.js
 *
 * See http://kenwheeler.github.io/slick/ for more information.
 *
 * The carousel() mixin should be included on a parent element that contains
 * one div per slide. No additional classes are necessary – the slick classes
 * referenced are added dynamically by slick.
 *
 * <div class="carousel">
 *     <div>
 *         <h2>A slide!</h2>
 *         <p>Some text.</p>
 *     </div>
 * </div>
 *
 * Emmet: .carousel>div*3>h2+p
 *
 * While there's more information in slick's documentation, .slick-slide wraps
 * slides while .slick-next and .slick-prev are used for the next/previous
 * arrows.
 */
@mixin carousel() {
    .slick-slide {
        color: #FFF;
        height: auto;
        padding: 3rem;
    }
    .slick-prev,
    .slick-next {
        z-index: 1;
    }
    .slick-prev {
        left: 2rem;
    }
    .slick-next {
        right: 2rem;
    }
}

/**
 * The COLUMNS mixin makes it so that immmediate child elements appear as
 * columns. It is responsive, allowing you to specify the media query at which
 * to switch the layout from stacking to columns.
 *
 * Additionally, it assumes the use of <hr> elements to create visual gutters
 * that are only visible while displayed as columns.
 *
 * <div class="columns">
 *     <div>
 *         <h2>A column</h2>
 *     </div>
 *     <hr />
 *     <div>
 *         <h2>Another column</h2>
 *     </div>
 * </div>
 *
 * Emmet: .columns>div+(hr+div)*2
 */
@mixin columns() {
    > hr {
        border: 0;
        display: none;
    }
    @media only screen and (min-width: $medium) {
        & {
            display: table;
            table-layout: fixed;
            width: 100%;
            > * {
                display: table-cell;
                vertical-align: top;
            }
            > hr {
                display: table-cell;
                width: 1rem;
            }
        }
    }
}

/**
 * DROPDOWN
 * The DROPDOWN mixin allows for dropdown menus. By default, a single
 * column dropdown is used. It is positioned to its parent.
 *
 * Emmet: nav.primary>ul>li>a{link name}+.dropdown>.menu>ul>li>(a{link name})*3
 */
@mixin dropdown() {
    @media only screen and (max-width: $large - 1px) {
        .dropdown,
        i.fa {
            display: none;
        }
    }
    @media only screen and (min-width: $large) {
        i.fa {
            display: inline-block;
        }
        .dropdown {
            background-color: #2A2A2A;
            color: #FFF;
            display: block;
            font-size: 1rem;
            min-width: 260px;
            opacity: 0;
            padding: 2rem 0;
            position: absolute;
            top: 100%;
            transition: opacity 300ms;
            visibility: hidden;
            z-index: 1;
            .menu {
                > * {
                    padding: 0 1rem;
                }
                li {
                    margin-bottom: 0.4em;
                }
                a {
                    color: #0C96DD;
                }
                a:hover,
                a:focus {
                    color: darken(#0C96DD, 10%);
                }
            }
        }
        .dropdown.open {
            opacity: 1;
            visibility: visible;
        }
    }
}

/**
 * DROPDOWN (mega)
 * The DROPDOWN (mega) mixin allows for full-width mega dropdown
 * menus. Call this mixin on a list item. Note that the simple
 * dropdown component is a dependency of this mega dropdown.
 * The mega dropdown is positioned to header.primary instead
 * of its parent list item.
 *
 * Emmet: nav.primary>ul>li>a{link name}+.dropdown>.menu(div*3)
 */
@mixin dropdown-mega() {
    position: static;
    @media only screen and (min-width: $large) {
        .dropdown {
            left: 0;
            top: 100%;
            width: 100%;
            .menu {
                display: flex;
                flex-flow: row wrap;
                justify-content: space-between;
                margin-left: auto;
                margin-right: auto;
                max-width: 1168px;
                > * {
                    border-left: 1px solid #777;
                    flex-basis: 0;
                    flex-grow: 1;
                    padding: 0 3rem;
                }
                > *:first-child {
                    border-left: none;
                    padding-left: 0;
                }
                > *:last-child {
                    padding-right: 0;
                }
            }
        }
    }
}

/**
 * FEATURES house three features in one row. Powered by flexbox,
 * this allows for a bottom alignment of each feature’s anchor. Use the
 * <code>$gutter</code> variable to pass you preferred gutter width.
 *
 * Emmet: .features>(div>(.icon>img)+h4+p+a)*3
 */
@mixin features($gutter: 3rem) {
    > * {
        background-color: #EEE;
        margin-bottom: 2rem;
        margin-left: auto;
        margin-right: auto;
        padding: 2rem;
        text-align: center;
        img,
        h3,
        p {
            margin-bottom: 1rem;
        }
        .button {
            margin-bottom: 0;
        }
    }
    @media only screen and (min-width: $large) {
        display: flex;
        flex-flow: row nowrap;
        justify-content: space-between;
        > * {
            display: flex;
            flex: 1 0 0;
            flex-direction: column;
            margin-left: $gutter;
            margin-right: 0;
            .button {
                align-self: center;
                margin-top: auto;
            }
            &:first-child {
                margin-left: 0;
            }
        }
    }
}

/**
 * The FOOTER mixin is a basic implementation of a footer with the company logo,
 * copyright, simple navigation (as opposed to a "super footer"), legal links,
 * social icons, and contact information.
 *
 * Emmet: footer.primary>(.container>div>(div.branding>(a>img)+p{123 Main Street})+(nav>ul>(li>a{Link})*4)+(div>ul.social>li>a>i.fa.fa-facebook))+.legal>p{Lorem}+a{Terms}
 */
@mixin footer {
    background-color: $charcoal;
    color: #FFF;
    font-size: 0.9rem;
    padding: 3rem 0;
    text-align: center;
    .branding {
        float: none;
        margin-top: 0;
        a {
            margin-bottom: 1rem;
        }
    }
    a {
        color: $link;
        &:hover {
            color: darken($link, 10%);
        }
    }
    nav ul {
        margin-bottom: 2rem;
        text-align: center;
    }
    .social a {
        color: #FFF;
        font-size: 1.5rem;
        margin-left: 0.5rem;
    }
    .legal {
        text-align: center;
        p {
            margin-bottom: 0.25rem;
        }
        a {
            margin-left: 0.35rem;
            margin-right: 0.35rem;
        }
    }

    @media only screen and (min-width: $large) {
        .container > div {
            display: flex;
            justify-content: space-between;
            > * {
                flex: 1 0 0;
            }
            > nav {
                flex-grow: 2;
                margin-bottom: 0;
            }
        }
        .branding {
            text-align: left;
        }
        .social {
            text-align: right;
        }
    }
}

/**
 * The LOGIN mixin is a basic implementation of a login module that includes a
 * username input, password input, submit button, forgot password link, and
 * remember me checkbox
 *
 * Emmet: .login>form>(div.text>label{Username}+input)+(div.password>label{Password}+input[type="password"])+div.actions>(.submit>button{Login})+(label>input[type="hidden"]+input[type="checkbox"])+a{Forgot Your Password?}
 */
@mixin login {
    background: #EEE;
    margin-left: auto;
    margin-right: auto;
    max-width: 600px;
    padding: 3rem;
    input {
        &:focus {
            box-shadow: 0 0 5px rgba(114, 164, 0, 0.7);
        }
    }
    .submit {
        text-align: center;
    }
    .actions {
        text-align: center;

    }
    @media only screen and (min-width: $medium) {
        .actions {
            align-items: center;
            display: flex;
            justify-content: space-between;
            flex-flow: row wrap;
            > * {
                margin: 0;
                padding: 0;
            }
            label {
                margin-left: 1em;
            }
            a {
                display: block;
                margin-left: auto;
                text-align: right;
            }
        }
    }
}

/**
 * PAGINATION
 *
 * Emmet: nav.pagination>ul>(li.previous>a{Previous})+(li*2>a)+(li.active>a)+(li*2>a)+li.next>a{Next}
 */
@mixin pagination {
    display: flex;
    justify-content: center;
    ul {
        border: 1px solid $border;
        border-radius: 2px;
        display: flex;
        justify-content: center;
    }
    li {
        margin-bottom: 0;
    }
    a {
        color: $link;
        padding: 0.5rem 1rem;
        position: relative;
    }
    li:not(:last-child) a {
        border-right: 1px solid $border;
    }
    li.active a {
        background-color: $brand-blue;
        color: #fff;
        cursor: default;
        pointer-events: none;
        &::before,
        &::after {
            background-color: $brand-blue;
        }
        &:hover {
            color: #fff;
            background-color: $link-hover;
            &::before,
            &::after {
                background-color: $link-hover;
            }
        }
    }
    li.disabled a {
        color: $border;
        cursor: default;
        pointer-events: none;
    }
    li.previous a {
        &::before {
            @include fontawesome("\f100");
        }
    }
    li.next a {
        &::before {
            @include fontawesome("\f101");
        }
    }
    li:hover:not(.active):not(.disabled) {
        a {
            background-color: $link;
            color: #FFF;

            &::before {
                background-color: $link;
                color: #FFF;
            }
        }
    }
}

/**
 * SEARCH LISTING shows a simple input/submit form along with a search
 * result listing.
 *
 * Emmet: ..
 */
@mixin search-listing() {
    form {
        display: flex;
        label {
            @include visuallyhidden;
        }
        .text {
            flex-grow: 1;
        }
        .submit {
            flex-basis: 120px;
            flex-shrink: 0;
        }
        .submit input {
            height: 100%;
            width: 100%;
        }
    }
    ul {
        list-style: none;
        padding: 0;
        margin: 0;
        li {
            border-top: 4px solid $border;
            margin-bottom: 0;
            padding: 2rem 0;
            .meta {
                display: block;
                font-size: 0.9rem;
                margin-bottom: 1em;
            }
            h2 + .meta {
                margin-top: -1em;
            }
            .summary {
                p:last-of-type {
                    margin-bottom: 0;
                }
            }
        }
    }
}

/**
 * The STICKY-HEADER mixin works with js (sticky-header.plugin.js) to hide the
 * header as you scroll down, and show it as you scroll back up. This is
 * responsive as the "top" value is dynamically set in the
 * js based on the height of the header. Top padding is also added
 * to the body dynamically via js so that the header doesn't overlap any
 * content.
 *
 * Emmet: header.primary
 *
 **/
@mixin sticky-header() {
    position: fixed;
    top: 0;
    transition: top 0.16s cubic-bezier(0, .40, .70, 1);
    width: 100%;
    z-index: 100;
}

/**
 * TABS
 *
 * Emmet: nav.tabs>ul>li*3>a
 */
@mixin tabs {
    a {
        border-radius: 4px 4px 0 0;
        border: 1px solid $border;
        border-color: transparent transparent $border;
    }

    li.active {
        a {
            border-color: $border $border transparent;
        }
    }

    li:hover:not(.active) {
        a {
            background: $border;
        }
    }
}


/**
 * The breadcrumb mixin provides basic breadcrumb styling, complete with
 * fontawesome icons being used as separators between crumbs.
 *
 * Emmet: nav.breadcrumbs>ul>li*3>a
 */
@mixin breadcrumbs {
    li:not(:last-child) a {
        padding-right: 0;

        &::after {
            padding-left: .5rem;
            @include fontawesome("\f105");
        }
    }
}

/**
 * the progress mixin provides a basic, pill-style progress nav bar like you
 * might find as part of an e-commerce or registration process.
 *
 * Emmet: nav.progress>ul>(li.complete*2>a)+(li.active>a)+(li*2>a)
 */
@mixin progress {
    display: flex;

    ul {
        border: 1px solid $border;
        border-radius: 2px;
    }

    a {
        padding: .5rem .5rem .5rem 1.5rem;
        position: relative;

        &::before,
        &::after {
            content: '';
            position: absolute;
            right: -.25em;
            width: .5em;
            z-index: 1;
            border-right: 1px solid $border;
        }

        &::before {
            bottom: 0;
            top: 50%;
            transform: skewX(-20deg);
        }

        &::after {
            bottom: 50%;
            top: 0;
            transform: skewX(20deg);
        }

        &:hover {
            color: $link-hover;
        }
    }

    li:not(:last-child) a {
        border-right: 1px solid $border;
    }

    li.active a {
        background: $brand-blue;
        color: #fff;
        cursor: default;
        pointer-events: none;

        &::before,
        &::after {
            background: $brand-blue;
        }

        &:hover {
            color: #fff;
            background: $link-hover;

            &::before,
            &::after {
                background: $link-hover;
            }
        }
    }

    li.disabled a {
        color: $border;
        cursor: default;
        pointer-events: none;
    }

    li:first-child a {
        padding-left: 1.5rem;
    }

    li:last-child a {
        padding-right: 1.5rem;

        &::before,
        &::after {
            display: none;
        }
    }

    li:hover:not(.active,.disabled) a {
        color: $link-hover;
    }

    li:not(:last-child) a {
        border: 0;
    }

    li.complete a {
        background: #fff;
        color: #ccc;

        &::before,
        &::after {
            background: #fff;
        }

        &:hover {
            color: $brand-blue;
        }
    }
}

/**
 *  Tiles helps you create an equal-width column grid layout without the use of row wrappers.
 *  Tiles is similar to the Features component, expect that Tiles’s items can wrap.
 *  Powered by flexbox, you can pass in a $gutter width and $column amount. Note that the
 *  specified $column amount only is respected at the large breakpoint. Tiles will automatically
 *  two-up your items at the medium breakpoint, and stack them at the small breakpoint.
 *
 *
 * Emmet: .tiles>.tiles
 *
 **/

@mixin tiles($gutter: 2rem, $columns: 4) {
    > * {
        background-color: #EEE;
        margin-bottom: $gutter;
        padding: 2rem;
        text-align: left;
        *:last-child {
            margin-bottom: 0;
        }
    }
    @media only screen and (min-width: $medium) {
        display: flex;
        flex-flow: row wrap;
        margin-left: -$gutter / 2;
        margin-right: -$gutter / 2;
        > * {
            flex-basis: calc(50% - #{$gutter});
            flex-shrink: 0;
            margin-left: $gutter / 2;
            margin-right: $gutter / 2;
        }
    }
    @media only screen and (min-width: $large) {
        > * {
            flex-basis: calc((100% / #{$columns}) - (#{$gutter}));
        }
    }
}
