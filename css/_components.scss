/**
 * _components.scss contains solely the mixin definitions for components.
 *
 * + This file should not depend on styles.scss; we should be able to use
 *   include this file without including styles.scss.
 * + This file should not generate any CSS on it's own; it should only contain
 *   mixin and/or function definitions.
 */


/**
 * Media query breakpoints
 */

$medium: 669px;
$large: 1024px;



/**
 * BACKGROUND VIDEO plays a video (without sound) in the background of an element.
 * Emmet: .backgroundvideo>(.panel>div>h1+p)+video>source[src]
 */
@mixin backgroundvideo() {
    & {
        align-items: center;
        display: flex;
        justify-content: center;
        overflow: hidden;
        position: relative;
        .mold {
            background-color: rgba(2255,255,255,0.6);
            padding: 2em;
            text-align: center;
            z-index: 2;
        }
        video {
            left: 0;
            position: absolute;
            top: 0;
            width: 100%;
            z-index: 1;
        }
    }
    &::before {
        content: "";
        display: block;
        padding-top: 30%;
    }
}



/**
 * CAROUSEL uses Slick to create a carousel. It defaults to a rather
 * basic, one-slide-at-a-time implementation with dots, but slick supports a
 * good deal of configuration including showing multiple slides, breakpoints,
 * syncing between slides, and plenty of javascript events and methods for
 * integration.
 *
 * The implementation on Boilerplate is using a CDN to provide
 *
 * + slick.css
 * + slick-theme.css
 * + slick.min.js
 *
 * See http://kenwheeler.github.io/slick/ for more information.
 *
 * The carousel() mixin should be included on a parent element that contains
 * one div per slide. No additional classes are necessary – the slick classes
 * referenced are added dynamically by slick.
 *
 * <div class="carousel">
 *     <div>
 *         <h2>A slide!</h2>
 *         <p>Some text.</p>
 *     </div>
 * </div>
 *
 * Emmet: .carousel>div*3>h2+p
 *
 * While there's more information in slick's documentation, .slick-slide wraps
 * slides while .slick-next and .slick-prev are used for the next/previous
 * arrows.
 */
@mixin carousel() {
    .slick-slide {
        color: #FFF;
        height: auto;
        padding: 3rem;
    }
    .slick-prev,
    .slick-next {
        z-index: 1;
    }
    .slick-prev {
        left: 2rem;
    }
    .slick-next {
        right: 2rem;
    }
}


/**
 * The COLUMNS mixin makes it so that immmediate child elements appear as
 * columns. It is responsive, allowing you to specify the media query at which
 * to switch the layout from stacking to columns.
 *
 * Additionally, it assumes the use of <hr> elements to create visual gutters
 * that are only visible while displayed as columns.
 *
 * <div class="columns">
 *     <div>
 *         <h2>A column</h2>
 *     </div>
 *     <hr />
 *     <div>
 *         <h2>Another column</h2>
 *     </div>
 * </div>
 *
 * Emmet: .columns>div+(hr+div)*2
 */
@mixin columns() {
    > hr {
        border: 0;
        display: none;
    }
    @media only screen and (min-width: $medium) {
        & {
            display: table;
            table-layout: fixed;
            width: 100%;
            > * {
                display: table-cell;
                vertical-align: top;
            }
            > hr {
                display: table-cell;
                width: 1rem;
            }
        }
    }
}


/**
 * FEATURES house three features in one row. Powered by flexbox,
 * this allows for a bottom alignment of each feature’s anchor. Use the
 * <code>$gutter</code> variable to pass you preferred gutter width.
 *
 * Emmet: .features>(div>(.icon>img)+h4+p+a)*3
 */
@mixin features($gutter) {
    & > * {
        background-color: #EEE;
        margin-bottom: 2rem;
        margin-left: auto;
        margin-right: auto;
        padding: 2rem;
        text-align: center;
        img,
        h3,
        p {
            margin-bottom: 1rem;
        }
        .button {
            margin-bottom: 0;
        }
    }
    @media only screen and (min-width: $large) {
        & {
            display: flex;
            flex-flow: row wrap;
            justify-content: space-between;
        }
        & > * {
            display: flex;
            flex: 1 0 0;
            flex-direction: column;
            margin-left: $gutter;
            margin-right: $gutter;
            .button {
                align-self: center;
                margin-top: auto;
            }
        }
    }
}

/**
 * TABS
 *
 * Emmet: nav.tabs>ul>li*3>a
 */
@mixin tabs {
    a {
        border-radius: 4px 4px 0 0;
        border: 1px solid $border;
        border-color: transparent transparent $border;
    }

    li.active {
        a {
            border-color: $border $border transparent;
        }
    }

    li:hover:not(.active) {
        a {
            background: $border;
        }
    }
}


/**
 * BREADCRUMBS
 *
 * Emmet: nav.breadcrumbs>ul>li*3>a
 */
@mixin breadcrumbs {
    li:not(:last-child) a {
        padding-right: 0;

        &::after {
            padding-left: .5rem;
            @include fontawesome("\f105");
        }
    }
}

/**
 * PROGRESS
 *
 * Emmet: nav.progress>ul>(li.complete*2>a)+(li.active>a)+(li*2>a)
 */
@mixin progress {
    display: flex;

    ul {
        border: 1px solid $border;
        border-radius: 2px;
    }

    a {
        padding: .5rem .5rem .5rem 1.5rem;
        position: relative;

        &::before,
        &::after {
            content: '';
            position: absolute;
            right: -.25em;
            width: .5em;
            z-index: 1;
            border-right: 1px solid $border;
        }

        &::before {
            bottom: 0;
            top: 50%;
            transform: skewX(-20deg);
        }

        &::after {
            bottom: 50%;
            top: 0;
            transform: skewX(20deg);
        }
    }

    li:not(:last-child) a {
        border-right: 1px solid $border;
    }

    li.active a {
        background: $brand-blue;
        color: #fff;
        cursor: default;
        pointer-events: none;

        &::before,
        &::after {
            background: $brand-blue;
        }

        &:hover {
            color: #fff;
            background: $link-hover;

            &::before,
            &::after {
                background: $link-hover;
            }
        }
    }

    li.disabled a {
        color: $border;
        cursor: default;
        pointer-events: none;
    }

    li:first-child a {
        padding-left: 1.5rem;
    }

    li:last-child a {
        padding-right: 1.5rem;

        &::before,
        &::after {
            display: none;
        }
    }

    li:hover:not(.active,.disabled) a {
        color: $link-hover;
    }

    li:not(:last-child) a {
        border: 0;
    }

    li.complete a {
        background: #fff;
        color: #ccc;

        &::before,
        &::after {
            background: #fff;
        }

        &:hover {
            color: $brand-blue;
        }
    }

    li.active a {
        background: $brand-blue;
        color: #fff;

        &::before,
        &::after {
            background: $brand-blue;
            border-color: $brand-blue;
        }

        &:hover {
            background: $link-hover;

            &::before,
            &::after {
                background: $link-hover;
            }
        }
    }
}


/**
 * PAGINATION
 *
 * Emmet: nav.pagination>ul>(li.previous>a{Previous})+(li*2>a)+(li.active>a)+(li*2>a)+li.next>a{Next}
 */
@mixin pagination {
    display: flex;

    ul {
        border: 1px solid $border;
        border-radius: 2px;
    }

    a {
        padding: .5rem 1rem;
        position: relative;
    }

    li:not(:last-child) a {
        border-right: 1px solid $border;
    }

    li.active a {
        background: $brand-blue;
        color: #fff;
        cursor: default;
        pointer-events: none;

        &::before,
        &::after {
            background: $brand-blue;
        }

        &:hover {
            color: #fff;
            background: $link-hover;

            &::before,
            &::after {
                background: $link-hover;
            }
        }
    }

    li.disabled a {
        color: $border;
        cursor: default;
        pointer-events: none;
    }

    li:first-child a {
        padding-left: 1.5rem;
    }

    li:last-child a {
        padding-right: 1.5rem;
    }

    li.previous a,
    li.next a {
        position: relative;
        visibility: hidden;
        width: 1rem;

        &::before {
            display: block;
            padding: 0.75rem 1rem;
            position: absolute;
            right: 0;
            top: 0;
            visibility: visible;
        }

    }

    li:hover:not(.active,.disabled) {
        a {
            color: #fff;
            background: $link-hover;

            &::before {
                color: #fff;
                background: $link-hover;
            }
        }
    }

    li.previous a {
        &::before {
            @include fontawesome("\f053");
            border-right: 1px solid $border;
        }
    }

    li.next a {
        &::before {
            @include fontawesome("\f054");
        }
    }
}
