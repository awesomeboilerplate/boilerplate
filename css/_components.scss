/**
 * _components.scss contains solely the mixin definitions for components.
 *
 * + This file should not depend on styles.scss; we should be able to use
 *   include this file without including styles.scss.
 * + This file should not generate any CSS on it's own; it should only contain
 *   mixin and/or function definitions.
 */


/**
 * The columns mixin makes it so that immmediate child elements appear as
 * columns. It is responsive, allowing you to specify the media query at which
 * to switch the layout from stacking to columns.
 *
 * Additionally, it assumes the use of <hr> elements to create visual gutters
 * that are only visible while displayed as columns.
 */
@mixin columns($query: "min-width: 669px") {
    > hr {
        border: 0;
        display: none;
    }

    @media only screen and (unquote($query)) {
        & {
            display: table;
            table-layout: fixed;
            width: 100%;

            > * {
                display: table-cell;
                vertical-align: top;
            }
            > hr {
                display: table-cell;
                width: 1rem;
            }
        }
    }
}

/**
 * The header mixin works with js (sticky-header.js) to hide the header as you scroll down, and show it as you 
 * scroll back up. This is responsive as the "top" value is dynamically set in the js based on the height of the
 * header. Top padding is also added to the body dynamically via js so that the header doesn't overlap any
 * content. 
 * 
 * Markup requires: header.primary
 *
 **/

@mixin sticky-header() {
    position: fixed;
    top: 0;
    transition: top 0.2s ease-in-out;
    width: 100%;
    z-index: 100;
}


